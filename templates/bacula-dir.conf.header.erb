#
# Managed by puppet
#

#
# Default Bacula Director Configuration file
#

#
# Bacula Director configuration
#

Director {
  Name = <%= scope.lookupvar('bacula::director_label') %>
  DIRport = 9101                                                            # where we listen for UA connections
  QueryFile = "/etc/bacula/query.sql"
  WorkingDirectory = "/var/spool/bacula"
  PidDirectory = "/var/run"
  Maximum Concurrent Jobs = 1
  Password = "<%= scope.lookupvar('bacula::director_password') %>"  # console password
  Messages = Daemon
}


#
# Definition of when this Job will run, 
# and if it is a full or incremental backup

# When to do the backups, full backup on first sunday of the month,
#  differential (i.e. incremental since full) every other sunday,
#  and incremental backups other days

Schedule {
  Name = "LinuxOSCycle"
  Run = Full 1st sun at 12:20
  Run = Full sun-sat at 14:00
  #Run = Full 1st sun at 23:05
  #Run = Differential 2nd-5th sun at 23:05
  #Run = Incremental mon-sat at 23:05
}

Schedule {
  Name = "LinuxDataCycle"
  Run = Full 1st sun at 12:20
  Run = Full sun-sat at 14:00
  #Run = Full 1st sun at 23:05
  #Run = Differential 2nd-5th sun at 23:05
  #Run = Incremental mon-sat at 23:05
}

Schedule {
  Name = "WeeklyCycle"
  Run = Full sun-sat at 12:20
  Run = Full sun-sat at 14:00
  #Run = Full 1st sun at 23:05
  #Run = Differential 2nd-5th sun at 23:05
  #Run = Incremental mon-sat at 23:05
}

# This schedule does the catalog. It starts after the WeeklyCycle
Schedule {
  Name = "WeeklyCycleAfterBackup"
  Run = Full sun-sat at 12:25
}


#
# Definitions of paths to the files we want to back-up,
# with rules to exclude certain files
#

FileSet {
  Name = "Full Set"
  Include {
    Options {
      signature = MD5
    }
#    
#  Put your list of files here, preceded by 'File =', one per line
#    or include an external list with:
#
#    File = <file-name>
#
#  Note: / backs up everything on the root partition.
#    if you have other partitons such as /usr or /home
#    you will probably want to add them too.
#
#  This File-directive would backup your whole filesystem.
#    It is disabled by default
#
    File = /
    File = /boot
    File = /home
    File = /opt
    File = /usr
    File = /var
    File = /var/log
  }

#
# If you backup the root directory, the following excluded
# files can be useful
#

  Exclude {
    File = /proc
    File = /tmp
    File = /.journal
    File = /.fsck
  }
}

# This is the backup of the catalog
FileSet {
  Name = "Catalog"
  Include {
    Options {
      signature = MD5
    }
    File = /var/spool/bacula/bacula.sql
  }
}


# Backup the catalog database (after the nightly save)
Job {
  Name = "BackupCatalog"
  Type = Backup
  Storage = File
  Client = <%= scope.lookupvar('bacula::director_label') %>-fd
  Messages = Standard
  Pool = Default
  Level = Full
  FileSet = "Catalog"
  Schedule = "WeeklyCycleAfterBackup"
  # This creates an ASCII copy of the catalog
  RunBeforeJob = "/usr/libexec/bacula/make_catalog_backup <%= scope.lookupvar('bacula::dbname') %> <%= scope.lookupvar('bacula::dbuser') %> <%= scope.lookupvar('bacula::dbpass') %> <%= scope.lookupvar('bacula::dbhost') %>"
  # This deletes the copy of the catalog
  RunAfterJob  = "/usr/libexec/bacula/delete_catalog_backup"
  Write Bootstrap = "/var/spool/bacula/BackupCatalog.bsr"
  Priority = 11                                                               # run after main backup
}


#
# <%= scope.lookupvar('bacula::director_server') %>.<%= domain %> - Client (File Services) to backup
#

Client {
  Name = <%= scope.lookupvar('bacula::director_label') %>-fd
  Address = <%= scope.lookupvar('bacula::director_server') %>.<%= domain %>
  FDPort = 9102
  Catalog = MyCatalog
  Password = "<%= scope.lookupvar('bacula::storage_password') %>"     # password for FileDaemon
  File Retention = 30 days                                                    # 30 days
  Job Retention = 6 months                                                    # six months
  AutoPrune = yes                                                             # Prune expired Jobs/Files
}


